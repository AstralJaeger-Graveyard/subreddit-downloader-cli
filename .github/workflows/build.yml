name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    matrix:
      python-version: [ "3.11" ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # Python is not setup by default
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - runs: python -m pip install black flake8 isort
      - name: Lint
        run: |
          flake8 .
          black . --check
          isort . --check
      - name: Install Poetry
        uses: snok/install-poetry@v1
      # Check if dependency cache exists if so, use cache
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      # Install dependencies, lint, test and build projects if any of these fail the whole pipepine is failed
      - name: Install
        run: poetry install --no-interaction
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/
          coverage report
      - name: Test
        run: npm run test
      - name: Build
        run: npm run build
        # Setup QEMU and docker build
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64,amd64
      - name: Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Authenticate
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          # Don't forget to place the dockerhub username and password in the github secrets
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Tag
        id: meta_tags
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ github.repository }}
          # Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
          flavor: |
            latest=true
      - name: Build & Push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_tags.outputs.tags }}
          labels: ${{ steps.meta_tags.outputs.labels }}